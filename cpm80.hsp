#define global __useslowz80jitemulation_flag__
#module
#deffunc z80memaccess int prm_0,int prm_1,int prm_2
_z80_addr@=prm_0
_z80_data@=prm_1
_z80_accesstype@=prm_2
goto *memoryaccesshnd@
#global
#include "z80.as"
#include "z80jit.as"
//z80jitintervaljobset *cfcfc,2
z80jitintervalset -1//0
#include "stdcall.as"
dupptr var_29,get16bitcompatiblememaddr(),65540,2
dupptr tgcmdfilename,get32bitfcbaddr(),128,2
wpoke stackformt@z80moduleaccess(0,0),12,0xFA00
//wpoke jitstack@m1(0),12,0xFA00
//wpoke var_29,0xFA00,0xF500
wpoke var_29,0xFA00,0
poke var_29,0,0xdb
poke var_29,1,0x00
poke var_29,2,0xc9
poke var_29,5,0xdb
poke var_29,6,0x01
poke var_29,7,0xc9
/*poke var_29,0,0xc3
wpoke var_29,1,0xF500
poke var_29,5,0xc3
wpoke var_29,6,0xF400*/
tgcmdfilename2=""
tgcmdfilename2=tgcmdfilename+".com"
exist tgcmdfilename2
strsize2=strsize
if strsize2!=-1{
sdim databinaryfile,strsize2
bload tgcmdfilename2,databinaryfile
}
memcpy var_29,databinaryfile,strsize2,0x100,0
address=0x100
repeat
z80jitrun address
loop
tx16bitreg=0:nullptrfxxxx=syscall(0,0,tx16bitreg)
end
*cfcfc
if peek(var_29,address)=0x76{tx16bitreg=0:nullptrfxxxx=syscall(-1,0,tx16bitreg)}
if address=0xF400{gosub *scallformain}
if address=0xF500{tx16bitreg=0:nullptrfxxxx=syscall(0,0,tx16bitreg)}
return
repeat
if peek(var_29,address)=0x76{tx16bitreg=0:nullptrfxxxx=syscall(-1,0,tx16bitreg)}else{z80run address,0}
/*if address=0xF400{gosub *scallformain}
if address=0xF500{break}*/
//awaiti=awaiti+1:if awaiti=65536{awaiti=0:await 1}
loop:tx16bitreg=0:nullptrfxxxx=syscall(0,0,tx16bitreg)
end://stop
*memoryaccesshnd
switch _z80_accesstype
case 0
poke var_29,_z80_addr,_z80_data
return
swbreak
case 1
return peek(var_29,_z80_addr)
swbreak
case 2
swbreak
case 3
switch _z80_addr&0xFF
case 0
tx16bitreg=0:nullptrfxxxx=syscall(0,0,tx16bitreg)
return 0
swbreak
case 1
tx16bitreg=0:lpoke tx16bitreg,0,wpeek(stack@z80moduleaccess(0),6)
sysclret=syscall(peek(stack@z80moduleaccess(0),2),wpeek(stack@z80moduleaccess(0),4),tx16bitreg)
wpoke stack@z80moduleaccess(0),6,tx16bitreg
/*tx16bitreg=0:lpoke tx16bitreg,0,wpeek(stackformt@z80moduleaccess(0,0),6)
sysclret=syscall(stackpeek(0,0,2),wpeek(stackformt@z80moduleaccess(0,0),4),tx16bitreg)
wpoke stackformt@z80moduleaccess(0,0),6,tx16bitreg*/
/*address=wpeek(var_29,wpeek(stack@z80moduleaccess(0),12))
wpoke stack@z80moduleaccess(0),12,wpeek(stack@z80moduleaccess(0),12)+2*/
return sysclret
swbreak
swend
return 0xFF
swbreak
swend
return
*scallformain
tx16bitreg=0:lpoke tx16bitreg,0,wpeek(jitstack@m1(0),6)
poke jitstack@m1(0),0,syscall(peek(jitstack@m1(0),2),wpeek(jitstack@m1(0),4),tx16bitreg)
wpoke jitstack@m1(0),6,tx16bitreg
address=wpeek(var_29,wpeek(jitstack@m1(0),12))
wpoke jitstack@m1(0),12,wpeek(jitstack@m1(0),12)+2
return